
What happens when you initialize a repository? Why do you need to do it?

The command to initialize a repository is:

- git init

It create the structure and file necessary to git.

Showing the status of the git repository:

- git status

Adding files to git staging area; before to commit they are added to the staging area:

- git add

How is the staging area different from the working directory and the repository?
What value do you think it offers?

git diff --> work on working directory and staging area

git diff --staged --> work on staging area and the most recent commit

git diff commit1 commit2 --> work on repository on commit1 and commit2

How can you use the staging area to make sure you have one commit per logical change?

By adding only the files of the logical change

What are some situations when branches would be helpful in keeping your history organized?
How would branches help?

It can be used to do a spike on the master project and if the spike is successful
it can replace the master.
The branch are like the trunk on the svn.

How do the diagrams help you visualize the branch structure?

We can see the branch history, from which commit start. It also help to see how many "distance" there is from the master

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Put together two branch as result a single branch. We represent it as a new commit that point to the head of the two merged branch

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

The automatic mode merge all the files that don't conflict so in case of many files is a rapid solution.
Manual is slow and it work well only when there are conflicts.
